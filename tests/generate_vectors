#!/usr/bin/python3
#  	umsftpd - User-mode SFTP application.
#  	Copyright (C) 2021-2021 Johannes Bauer
#
#  	This file is part of umsftpd.
#
#  	umsftpd is free software; you can redistribute it and/or modify
#  	it under the terms of the GNU General Public License as published by
#  	the Free Software Foundation; this program is ONLY licensed under
#  	version 3 of the License, later versions are explicitly excluded.
#
#  	umsftpd is distributed in the hope that it will be useful,
#  	but WITHOUT ANY WARRANTY; without even the implied warranty of
#  	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  	GNU General Public License for more details.
#
#  	You should have received a copy of the GNU General Public License
#  	along with umsftpd; if not, write to the Free Software
#  	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  	Johannes Bauer <JohannesBauer@gmx.de>

import os
import random
import string
import cryptography.hazmat.backends
import cryptography.hazmat.primitives
import cryptography.hazmat.primitives.kdf.pbkdf2
import cryptography.hazmat.primitives.kdf.scrypt

#kdfname = "PASSDB_KDF_PBKDF2_SHA256"
kdfname = "PASSDB_KDF_SCRYPT"

alphabet = string.ascii_lowercase + string.ascii_uppercase + string.digits + "!$%&/()+-_"
password = ""
for i in range(random.randint(8, 16)):
	password += random.choice(alphabet)
password = password.encode()

salt = os.urandom(16)
backend = cryptography.hazmat.backends.default_backend()
if kdfname == "PASSDB_KDF_PBKDF2_SHA256":
	iterations = random.randint(100, 2000)
	param_key = "pbkdf2"
	params = [ ("iterations", str(iterations)) ]
	kdf = cryptography.hazmat.primitives.kdf.pbkdf2.PBKDF2HMAC(algorithm = cryptography.hazmat.primitives.hashes.SHA256(), length = 32, salt = salt, iterations = iterations, backend = backend)
elif kdfname == "PASSDB_KDF_SCRYPT":
	N = 1 << random.randint(1, 3)
	r = random.randint(1, 4)
	p = random.randint(1, 4)
	params = [
		("N", str(N)),
		("r", str(r)),
		("p", str(p)),
		("maxmem_mib", "128"),
	]
	param_key = "scrypt"
	hashval = bytes(2)
	kdf = cryptography.hazmat.primitives.kdf.scrypt.Scrypt(salt = salt, length = 32, n = N, r = r, p = p, backend = backend)
else:
	raise NotImplementedError(kdfname)

def hex_array(data):
	return ", ".join("0x%02x" % (c) for c in data)
hashval = kdf.derive(password)

print("/* Passphrase: %s */" % (password.decode()))
print("struct passdb_entry_t entry = {")
print("	.kdf = %s," % (kdfname))
for (param_name, param_value) in params:
	print("	.params.%s.%s = %s," % (param_key, param_name, param_value))
print("	.salt = { %s }," % (hex_array(salt)))
print("	.hash = { %s }," % (hex_array(hashval)))
print("};")
