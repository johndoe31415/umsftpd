#!/usr/bin/python3
#  	umsftpd - User-mode SFTP application.
#  	Copyright (C) 2021-2021 Johannes Bauer
#
#  	This file is part of umsftpd.
#
#  	umsftpd is free software; you can redistribute it and/or modify
#  	it under the terms of the GNU General Public License as published by
#  	the Free Software Foundation; this program is ONLY licensed under
#  	version 3 of the License, later versions are explicitly excluded.
#
#  	umsftpd is distributed in the hope that it will be useful,
#  	but WITHOUT ANY WARRANTY; without even the implied warranty of
#  	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  	GNU General Public License for more details.
#
#  	You should have received a copy of the GNU General Public License
#  	along with umsftpd; if not, write to the Free Software
#  	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import re
import os.path
import mako.lookup
import collections
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Generate a main() module for a given testcase file.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("infile", help = "Input C filename")
parser.add_argument("outfile", help = "Output C filename")
args = parser.parse_args(sys.argv[1:])

Testcase = collections.namedtuple("Testcase", [ "name", "function_name" ])
testcases = [ ]
with open(args.infile) as f:
	for match in re.finditer("^void (?P<function_name>test_(?P<name>[a-zA-Z0-9_]+))", f.read(), re.MULTILINE):
		match = match.groupdict()
		testcases.append(Testcase(**match))

template_vars = {
	"test_name":	os.path.basename(args.infile),
	"testcases":	testcases,
}

lookup = mako.lookup.TemplateLookup([ "." ], strict_undefined = True)
template = lookup.get_template("testmain.c")
rendered = template.render(**template_vars)
with open(args.outfile, "w") as f:
	f.write(rendered)
